- hosts: "{{ inventory_hosts }}"
  # limit to handle only one host at a time
  serial: 1
  vars_prompt:
    - name: "inventory_hosts"
      prompt: "Upgrade kubernetes on which host or group in inventory?"
      private: false
    - name: "k8s_version"
      prompt: "Upgrade cluster to which kubernetes version?"
      private: false
  tasks:
    # drain
    - import_tasks: tasks/drain-node.yaml
      vars:
        host: "{{ inventory_hostname }}"

    # unhold k8s packages
    - name: "Unhold k8s packages"
      become: true
      become_user: root
      command: apt-mark unhold kubeadm kubectl kubelet

    # upgrade kubeadm package
    - name: "Upgrade kubeadm package"
      become: true
      become_user: root
      apt:
        name: kubeadm={{ k8s_version }}-00
        state: present
        update_cache: true

    - name: "Hold kubeadm package"
      become: true
      become_user: root
      dpkg_selections:
        name: kubeadm
        selection: hold

    # kubeadm upgrade step
    # if first control-plane:
    - name: "Plan kubeadm upgrade"
      become: true
      become_user: root
      command: kubeadm upgrade plan
      when: inventory_hostname == groups['k8s_control_plane'][0]
    - name: "Apply kubeadm upgrade if first control-plane node"
      become: true
      become_user: root
      command: kubeadm upgrade apply v{{ k8s_version }} -y
      when: inventory_hostname == groups['k8s_control_plane'][0]
    # else:
    - name: "Apply kubeadm upgrade if not first control-plane node"
      become: true
      become_user: root
      command: kubeadm upgrade node
      when: inventory_hostname != groups['k8s_control_plane'][0]

    # upgrade kubelet & kubectl packages
    - name: "Upgrade kubelet and kubectl"
      become: true
      become_user: root
      apt: name={{ item }} state=present update_cache=yes
      with_items:
        - kubelet={{ k8s_version }}-00
        - kubectl={{ k8s_version }}-00
    - name: "Hold kubelet package"
      become: true
      become_user: root
      dpkg_selections:
        name: kubelet
        selection: hold
    - name: "Hold kubectl package"
      become: true
      become_user: root
      dpkg_selections:
        name: kubectl
        selection: hold

    # upgrade containerd.io
    - name: "Unhold containerd.io"
      become: true
      become_user: root
      command: apt-mark unhold containerd.io
    - name: "Upgrade containerd.io"
      become: true
      become_user: root
      apt:
        name: containerd.io
        state: latest
        update_cache: true
    - name: "Hold containerd.io"
      become: true
      become_user: root
      command: apt-mark hold containerd.io

    # restart kubelet & containerd.io
    - name: "Restart containerd and kubelet"
      become: true
      become_user: root
      systemd:
        daemon_reload: true
        enabled: true
        name: "{{ item }}"
        state: restarted
      with_items:
        - containerd
        - kubelet

    # uncordon node
    - import_tasks: tasks/uncordon-node.yaml
      vars:
        host: "{{ inventory_hostname }}"
