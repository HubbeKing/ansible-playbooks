- hosts: "{{ inventory_hosts }}"
  name: Upgrade kubeadm-installed kubernetes cluster
  # limit to handle only one host at a time
  serial: 1
  vars_prompt:
    - name: "inventory_hosts"
      prompt: "Upgrade kubernetes on which host or group in inventory?"
      private: false
    - name: "k8s_version"
      prompt: "Upgrade cluster to which kubernetes version?"
      private: false
    - name: "package_upgrade"
      prompt: "Run a full package upgrade as well during upgrade? (yes/no)"
      default: "yes"
      private: false
  tasks:
    - name: Get installed version for node
      ansible.builtin.command:
        argv:
          - kubectl
          - get
          - node
          - -o
          - custom-columns=VERSION:.status.nodeInfo.kubeletVersion
          - --no-headers
          - "{{ inventory_hostname }}"
      register: node_version_cmd
      delegate_to: 127.0.0.1
      when: "'k8s_cluster' in group_names"

    - name: Run upgrade
      when: node_version_cmd.stdout.find(k8s_version) == -1
      block:
        # drain
        - name: Drain node of workloads
          ansible.builtin.import_tasks: tasks/drain-node.yaml
          vars:
            host: "{{ inventory_hostname }}"

        - name: Create variable for kubernetes major version
          ansible.builtin.set_fact:
            k8s_major_version: "{{ k8s_version[:-2] }}"

        - name: Ensure kubernetes apt key is up to date
          become: true
          become_user: root
          ansible.builtin.get_url:
            url: "https://pkgs.k8s.io/core:/stable:/v{{ k8s_major_version }}/deb/Release.key"
            dest: '/etc/apt/keyrings/kubernetes-apt-keyring.asc'
            mode: '0644'

        - name: Ensure kubernetes repo configuration is up to date
          become: true
          become_user: root
          ansible.builtin.copy:
            content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v{{ k8s_major_version }}/deb/ /"
            dest: /etc/apt/sources.list.d/kubernetes.list
            mode: "0644"

        - name: Ensure CRI-O apt key is up to date
          become: true
          become_user: root
          ansible.builtin.get_url:
            url: "https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ k8s_major_version }}/deb/Release.key "
            dest: '/etc/apt/keyrings/cri-o-apt-keyring.asc'
            mode: '0644'

        - name: Ensure CRI-O repo configuration is up to date
          become: true
          become_user: root
          ansible.builtin.copy:
            content: deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.asc] https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ k8s_major_version }}/deb/ /
            dest: '/etc/apt/sources.list.d/cri-o.list'
            mode: '0644'

        # upgrade kubeadm package
        - name: "Upgrade kubeadm package"
          become: true
          become_user: root
          ansible.builtin.apt:
            name: kubeadm={{ k8s_version }}-*
            state: present
            update_cache: true
            allow_change_held_packages: true

        - name: "Hold kubeadm package"
          become: true
          become_user: root
          ansible.builtin.dpkg_selections:
            name: kubeadm
            selection: hold

        # kubeadm upgrade step
        # if first control-plane:
        - name: "Plan kubeadm upgrade"
          become: true
          become_user: root
          ansible.builtin.command: kubeadm upgrade plan
          when: inventory_hostname == groups['k8s_control_plane'][0]
        - name: "Apply kubeadm upgrade if first control-plane node"
          become: true
          become_user: root
          ansible.builtin.command: kubeadm upgrade apply v{{ k8s_version }} -y
          when: inventory_hostname == groups['k8s_control_plane'][0]
        # else:
        - name: "Apply kubeadm upgrade if not first control-plane node"
          become: true
          become_user: root
          ansible.builtin.command: kubeadm upgrade node
          when: inventory_hostname != groups['k8s_control_plane'][0]

        # upgrade kubelet & kubectl packages
        - name: "Upgrade kubelet and kubectl"
          become: true
          become_user: root
          ansible.builtin.apt:
            name: "{{ item }}"
            state: present
            update_cache: true
            allow_change_held_packages: true
          with_items:
            - kubelet={{ k8s_version }}-*
            - kubectl={{ k8s_version }}-*
        - name: "Hold kubelet package"
          become: true
          become_user: root
          ansible.builtin.dpkg_selections:
            name: kubelet
            selection: hold
        - name: "Hold kubectl package"
          become: true
          become_user: root
          ansible.builtin.dpkg_selections:
            name: kubectl
            selection: hold

        # upgrade cri-o
        - name: "Upgrade cri-o"
          become: true
          become_user: root
          ansible.builtin.apt:
            name: cri-o
            state: latest
            update_cache: true
            allow_change_held_packages: true
        - name: "Hold cri-o package"
          become: true
          become_user: root
          ansible.builtin.dpkg_selections:
            name: cri-o
            selection: hold

        # run full-upgrade
        - name: "Run full package upgrade"
          become: true
          become_user: root
          ansible.builtin.apt:
            upgrade: full
            update_cache: true
          when: package_upgrade | bool
        - name: "Check if reboot is required"
          register: reboot_required_file
          ansible.builtin.stat:
            path: /var/run/reboot-required

        # reboot?
        - name: "Reboot host"
          become: true
          become_user: root
          ansible.builtin.reboot:
            msg: "Reboot initiated by Ansible for kernel update"
            connect_timeout: 5
            reboot_timeout: 600
            pre_reboot_delay: 0
            post_reboot_delay: 60
            test_command: uptime
          when: reboot_required_file.stat.exists

        # else restart kubelet & cri-o
        - name: "Restart cri-o and kubelet"
          become: true
          become_user: root
          ansible.builtin.systemd:
            daemon_reload: true
            enabled: true
            name: "{{ item }}"
            state: restarted
          with_items:
            - crio
            - kubelet
          when: not reboot_required_file.stat.exists

        # uncordon node
        - name: Ready node for workloads
          ansible.builtin.import_tasks: tasks/uncordon-node.yaml
          vars:
            host: "{{ inventory_hostname }}"
