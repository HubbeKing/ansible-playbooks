- hosts: dns
  name: Set up DNS servers for High Availability
  serial: 1
  tasks:
    # Set up Pihole DNS
    - name: Check if Pihole is installed
      register: pihole_cmd
      ansible.builtin.stat:
        path: /usr/local/bin/pihole
    - name: Install pihole
      when:
        - not pihole_cmd.stat.exists
      block:
        - name: Fetch install script
          ansible.builtin.get_url:
            dest: /tmp/pihole_install.sh
            mode: 0755
            url: https://install.pi-hole.net
        - name: Ensure pihole dir exists
          ansible.builtin.file:
            path: /etc/pihole
            state: directory
            mode: 0755
        - name: Preseed pihole setup vars
          ansible.builtin.copy:
            content: |
              PIHOLE_INTERFACE=eth0
              IPV4_ADDRESS=0.0.0.0
              IPV6_ADDRESS=0:0:0:0:0:0
              PIHOLE_DNS_1=1.1.1.1
              PIHOLE_DNS_2=1.0.0.1
              QUERY_LOGGING=true
              INSTALL_WEB_SERVER=true
              INSTALL_WEB_INTERFACE=true
              LIGHTTPD_ENABLED=true
              WEBPASSWORD=""
            mode: 0644
            dest: /etc/pihole/setupVars.conf
        - name: Run installer
          ansible.builtin.command: bash /tmp/pihole_install.sh --unattended
          when:
            - not pihole_cmd.stat.exists
    - name: Update pihole
      ansible.builtin.command: pihole -up
      when:
        - pihole_cmd.stat.exists

    # deploy gravity sync config
    - name: Ensure gravity-sync dir exists
      ansible.builtin.file:
        path: /etc/gravity-sync
        state: directory
        mode: 0755
    - name: Deploy gravity-sync.conf if primary DNS
      ansible.builtin.copy:
        src: files/dns/gravity-sync_primary.conf
        dest: /etc/gravity-sync/gravity-sync.conf
        mode: 0644
      when: inventory_hostname == groups['dns'][0]
    - name: Deploy gravity-sync.conf if secondary DNS
      ansible.builtin.copy:
        src: files/dns/gravity-sync_secondary.conf
        dest: /etc/gravity-sync/gravity-sync.conf
        mode: 0644
      when: inventory_hostname != groups['dns'][0]

    # set up Gravity Sync
    - name: Check if gravity sync is installed
      register: gravity_sync_cmd
      ansible.builtin.stat:
        path: /usr/local/bin/gravity-sync
    - name: Install gravity-sync
      when:
        - not gravity_sync_cmd.stat.exists
      block:
        - name: Fetch install script
          ansible.builtin.get_url:
            dest: /tmp/gravity-sync_install.sh
            mode: 0755
            url: https://gravity.vmstan.com
        - name: Run installer
          ansible.builtin.command: bash /tmp/gravity-sync_install.sh
          when:
            - not gravity_sync_cmd.stat.exists
    - name: Update gravity-sync
      ansible.builtin.command: gravity-sync update
      when:
        - gravity_sync_cmd.stat.exists

    # deploy keepalived config
    - name: Ensure keepalived dir exists
      ansible.builtin.file:
        path: /etc/keepalived
        state: directory
        mode: 0755
    - name: Deploy keepalived.conf if primary DNS
      ansible.builtin.copy:
        src: files/dns/keepalived_primary.conf
        dest: /etc/keepalived/keepalived.conf
        mode: 0644
      when: inventory_hostname == groups['dns'][0]
      register: primary_config
    - name: Deploy keepalived.conf if secondary DNS
      ansible.builtin.copy:
        src: files/dns/keepalived_secondary.conf
        dest: /etc/keepalived/keepalived.conf
        mode: 0644
      when: inventory_hostname != groups['dns'][0]
      register: secondary_config
    - name: Create keepalived_script user
      ansible.builtin.user:
        name: keepalived_script
        create_home: false
        system: true
    - name: Ensure keepalive script folder exists
      ansible.builtin.file:
        path: /etc/keepalived_scripts
        state: directory
        mode: 0755
        owner: keepalived_script
        group: keepalived_script
    - name: Deploy DNS check script
      ansible.builtin.copy:
        src: files/dns/check_dns.sh
        dest: /etc/keepalived_scripts/check_dns.sh
        mode: 0700
        owner: keepalived_script
        group: keepalived_script
      register: check_script

    # ensure keepalived is installed
    - name: Install keepalived
      ansible.builtin.apt:
        name: keepalived
        state: present

    # ensure 'dig' command is available
    - name: Install dnsutils
      ansible.builtin.apt:
        name: bind9-dnsutils
        state: present

    # ensure keepalived is running
    - name: Set up keepalived service
      ansible.builtin.systemd:
        name: keepalived
        enabled: true
        state: started

    - name: Restart keepalived to pick up config changes
      ansible.builtin.systemd:
        name: keepalived
        state: restarted
      when: (inventory_hostname == groups['dns'][0] and primary_config.changed) or
            (inventory_hostname != groups['dns'][0] and secondary_config.changed) or
            check_script.changed

    - name: Wait before updating next host to ensure DNS availability
      ansible.builtin.pause:
        seconds: 15
