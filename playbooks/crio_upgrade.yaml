- hosts: "{{ inventory_hosts }}"
  serial: 1
  vars_prompt:
    - name: "inventory_hosts"
      prompt: "Upgrade cri-o on which host or group in inventory?"
      private: no
  tasks:
    # drain node
    - import_tasks: tasks/drain_node.yaml
      vars:
        host: "{{ inventory_hostname }}"
      when: "'k8s_cluster' in group_names"

    # unhold packages
    - name: "Unhold cri-o packages"
      become: true
      become_user: root
      command: apt-mark unhold cri-o cri-o-runc

    - name: "Run full upgrade"
      become: true
      become_user: root
      apt:
        upgrade: full
        update_cache: "yes"

    # hold packages
    - name: "Hold cri-o packages"
      become: true
      become_user: root
      command: apt-mark hold cri-o cri-o-runc

    - name: "Check if reboot is required"
      become: true
      become_user: root
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_md5=no

    - name: "Reboot host"
      become: true
      become_user: root
      reboot:
        msg: "Reboot initiated by Ansible for kernel update"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 60
        test_command: uptime
      when: reboot_required_file.stat.exists

    # restart kubelet & crio
    - name: "Reload systemctl"
      become: true
      become_user: root
      command: systemctl daemon-reload
      when: not reboot_required_file.stat.exists
    - name: "Restart crio and kubelet"
      become: true
      become_user: root
      command: systemctl restart crio kubelet
      when: not reboot_required_file.stat.exists

    # uncordon node
    - import_tasks: tasks/uncordon_node.yaml
      vars:
        host: "{{ inventory_hostname }}"
